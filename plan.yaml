implementation_plan:
  edit_feature:
    - endpoint:
        path: "/api/todos/{id}"
        method: "PUT"
        request_body:
          title: "string"
          description: "string"
        response:
          updated_todo: "Todo object"
    - frontend:
        - モーダル表示時にTodoの現在の情報を正しく取得して表示
        - 更新後のエラーハンドリングの追加
        - モーダルのクローズ処理の改善

  completed_task_toggle:
    - frontend:
        - 完了タスクの表示/非表示を切り替える際のCSSクラス名を修正
        - 切り替えボタンのテキスト更新処理の改善
        - 表示/非表示の状態管理の追加
    - styling:
        - 完了タスクの視覚的な表現の統一（背景色、取り消し線など）

  subtask_feature:
    - data_model:
        - parent_id: "親タスクのID"
        - subtasks: "子タスクのリスト"
        - hierarchy_level: "階層レベル（ネストの深さ）"
    
    - endpoints:
        add_subtask:
          path: "/api/todos/{parentId}/subtasks"
          method: "POST"
          request_body:
            title: "string"
            description: "string"
          response:
            created_subtask: "Todo object"
        
        get_subtasks:
          path: "/api/todos/{parentId}/subtasks"
          method: "GET"
          response:
            subtasks: "List of Todo objects"
    
    - frontend:
        modal:
          - タイトル: "【{親タスク名}】を達成するためのタスク"
          - �明文: "必要な分だけ子タスクを追加してください"
          - 入力フィールド:
            - タスク名（必須）
            - 説明（任意）
          - ボタン:
            - 追加: "子タスクを追加（追加後も入力フォームは閉じない）"
            - 完了: "子タスクの追加を完了してモーダルを閉じる"
          - 追加済み子タスク:
            - 一覧表示: "モーダル内で追加した子タスクをリアルタイムで表示"
            - 削除機能: "追加した子タスクを個別に削除可能"
        
        display:
          - 親タスクの表示:
            - 展開/折りたたみアイコン: "子タスクの有無に応じて表示"
            - 子タスク数の表示: "（子タスク：N件）"
          
          - 子タスクの表示:
            - インデント: "親タスクから20px"
            - 視覚的な階層構造:
              - 縦線: "親タスクと子タスクを接続"
              - 横線: "子タスクの左側に接続"
            - スタイル:
              - 背景色: "親タスクより薄い色"
              - 左ボーダー: "階層を示す縦線"
            - アニメーション:
              - 展開時: "スライドダウン"
              - 折りたたみ時: "スライドアップ"

    - task_management:
        - 親タスク完了時:
          - 子タスクの自動完了: "オプションとして選択可能"
          - 確認ダイアログ: "子タスクも完了にしますか？"
        - 子タスク完了時:
          - 親タスクへの影響: "全ての子タスクが完了したら親タスクも自動完了（オプション）"

  error_handling:
    - frontend:
        - APIリクエストのエラーハンドリング
        - ユーザーへのエラーメッセージ表示
        - 入力バリデーション
    
    - backend:
        - 適切なHTTPステータスコードの返却
        - エラーメッセージの詳細化
        - バリデーションチェックの強化

  testing:
    - unit_tests:
        - 各エンドポイントのテスト
        - バリデーションのテスト
        - エラーハンドリングのテスト
    
    - integration_tests:
        - フロントエンドとバックエンドの結合テスト
        - 子タスク機能の動作確認
        - 完了タスクの表示/非表示のテスト
